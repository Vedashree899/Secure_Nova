import streamlit as st
import pandas as pd
from utils.data_processing import validate_input
from utils.error_handler import handle_api_error

class VulnerabilityScanner:
    """Module for vulnerability scanning and analysis."""
    
    def __init__(self, wolf_api):
        """Initialize the vulnerability scanner module."""
        self.wolf_api = wolf_api
    
    def show_interface(self):
        """Display the vulnerability scanner interface."""
        st.write("Scan systems, applications, or code for vulnerabilities and receive AI-powered analysis.")
        
        # Create tabs for different scanning options
        tab1, tab2, tab3 = st.tabs(["Web Application", "Network", "Code Analysis"])
        
        with tab1:
            return self._web_application_scanner()
            
        with tab2:
            return self._network_scanner()
            
        with tab3:
            return self._code_scanner()
    
    def _web_application_scanner(self):
        """Interface for web application vulnerability scanning."""
        st.subheader("Web Application Vulnerability Scanner")
        
        # Input form
        with st.form("web_app_scan_form"):
            url = st.text_input("Target URL", placeholder="https://example.com")
            scan_options = st.multiselect(
                "Scan Options",
                options=[
                    "XSS (Cross-Site Scripting)",
                    "SQL Injection",
                    "CSRF (Cross-Site Request Forgery)",
                    "Authentication Issues",
                    "Authorization Issues",
                    "API Security",
                    "Session Management"
                ],
                default=["XSS (Cross-Site Scripting)", "SQL Injection"]
            )
            
            additional_info = st.text_area(
                "Additional Information",
                placeholder="Provide any additional details about the web application..."
            )
            
            submit_button = st.form_submit_button("Scan for Vulnerabilities")
        
        # Process form submission
        if submit_button:
            # Validate inputs
            valid_url = validate_input(url, "url")
            
            if not valid_url:
                st.error("Please enter a valid URL.")
                return None
            
            if not scan_options:
                st.warning("Please select at least one scan option.")
                return None
            
            # Prepare context for API
            context = {
                "url": valid_url,
                "scan_options": scan_options,
                "additional_info": additional_info
            }
            
            # Construct prompt for the API
            prompt = f"""
            Perform a web application vulnerability assessment for {valid_url}.
            Focus on these vulnerability types: {', '.join(scan_options)}.
            """
            
            # Call the Wolf API
            results = self.wolf_api.analyze_security(prompt, context)
            
            # Handle API errors
            if handle_api_error(results):
                return None
            
            return results
        
        return None
    
    def _network_scanner(self):
        """Interface for network vulnerability scanning."""
        st.subheader("Network Vulnerability Scanner")
        
        # Input form
        with st.form("network_scan_form"):
            target = st.text_input("Target IP or Range", placeholder="192.168.1.1 or 192.168.1.0/24")
            
            port_options = st.multiselect(
                "Port Scan Options",
                options=[
                    "Common Ports",
                    "All Ports",
                    "Custom Port Range"
                ],
                default=["Common Ports"]
            )
            
            # Show custom port range input if selected
            custom_ports = None
            if "Custom Port Range" in port_options:
                custom_ports = st.text_input("Custom Port Range", placeholder="80,443,8000-8100")
            
            scan_options = st.multiselect(
                "Scan Options",
                options=[
                    "Open Ports",
                    "Service Detection",
                    "OS Detection",
                    "Firewall Analysis",
                    "Common Vulnerabilities"
                ],
                default=["Open Ports", "Service Detection"]
            )
            
            submit_button = st.form_submit_button("Scan Network")
        
        # Process form submission
        if submit_button:
            # Validate inputs
            valid_ip = validate_input(target, "ip")
            
            if not valid_ip and not "/" in target:  # Simple validation for CIDR notation
                st.error("Please enter a valid IP address or CIDR range.")
                return None
            
            if not scan_options:
                st.warning("Please select at least one scan option.")
                return None
            
            # Prepare context for API
            context = {
                "target": target,
                "port_options": port_options,
                "custom_ports": custom_ports if custom_ports else "N/A",
                "scan_options": scan_options
            }
            
            # Construct prompt for the API
            prompt = f"""
            Perform a network vulnerability assessment for {target}.
            Analyze ports based on: {', '.join(port_options)}.
            Focus on these aspects: {', '.join(scan_options)}.
            """
            
            # Call the Wolf API
            results = self.wolf_api.analyze_security(prompt, context)
            
            # Handle API errors
            if handle_api_error(results):
                return None
            
            return results
        
        return None
    
    def _code_scanner(self):
        """Interface for code vulnerability scanning."""
        st.subheader("Code Vulnerability Scanner")
        
        # Language selection
        language = st.selectbox(
            "Programming Language",
            options=["Python", "JavaScript", "Java", "C/C++", "PHP", "Go", "Ruby", "Other"]
        )
        
        # Scan options based on selected language
        language_specific_options = {
            "Python": ["Dependencies Security", "Input Validation", "Command Injection", "File Handling", "Authentication"],
            "JavaScript": ["XSS", "Prototype Pollution", "Dependency Issues", "Auth Vulnerabilities", "Command Injection"],
            "Java": ["OWASP Top 10", "Deserialization", "XXE", "SQL Injection", "Spring Security Issues"],
            "C/C++": ["Buffer Overflows", "Memory Leaks", "Integer Overflows", "NULL Pointer Dereference", "Format String Vulnerabilities"],
            "PHP": ["SQL Injection", "XSS", "File Inclusion", "Command Injection", "Authentication Issues"],
            "Go": ["Input Validation", "Error Handling", "Concurrency Issues", "Dependency Issues"],
            "Ruby": ["SQL Injection", "Command Injection", "Dependency Issues", "Authentication Issues"],
            "Other": ["Common Vulnerabilities", "OWASP Top 10", "Input Validation", "Authentication Issues"]
        }
        
        scan_options = st.multiselect(
            "Scan Options",
            options=language_specific_options.get(language, ["Common Vulnerabilities"]),
            default=[language_specific_options.get(language, ["Common Vulnerabilities"])[0]]
        )
        
        # Code input
        code_input = st.text_area(
            "Paste Code to Analyze",
            height=300,
            placeholder=f"Paste your {language} code here for security analysis..."
        )
        
        # Submit button
        if st.button("Analyze Code"):
            if not code_input.strip():
                st.warning("Please enter some code to analyze.")
                return None
            
            # Prepare context for API
            context = {
                "language": language,
                "scan_options": scan_options,
                "code_length": len(code_input)
            }
            
            # Construct prompt for the API
            prompt = f"""
            Perform a code security analysis for the following {language} code.
            Focus on these vulnerability types: {', '.join(scan_options)}.
            
            Code to analyze:
            ```{language.lower()}
            {code_input}
            ```
            """
            
            # Call the Wolf API
            results = self.wolf_api.analyze_security(prompt, context)
            
            # Handle API errors
            if handle_api_error(results):
                return None
            
            return results
        
        return None
